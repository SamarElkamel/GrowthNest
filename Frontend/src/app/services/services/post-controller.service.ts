/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addPost } from '../fn/post-controller/add-post';
import { AddPost$Params } from '../fn/post-controller/add-post';
import { deletePost } from '../fn/post-controller/delete-post';
import { DeletePost$Params } from '../fn/post-controller/delete-post';
import { Post } from '../models/post';
import { retrieveAllPost } from '../fn/post-controller/retrieve-all-post';
import { RetrieveAllPost$Params } from '../fn/post-controller/retrieve-all-post';
import { retrievePost } from '../fn/post-controller/retrieve-post';
import { RetrievePost$Params } from '../fn/post-controller/retrieve-post';
import { updatePost } from '../fn/post-controller/update-post';
import { UpdatePost$Params } from '../fn/post-controller/update-post';
import { validatePost } from '../fn/post-controller/validate-post';
import { ValidatePost$Params } from '../fn/post-controller/validate-post';

@Injectable({ providedIn: 'root' })
export class PostControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updatePost()` */
  static readonly UpdatePostPath = '/post/updatepost';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatePost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePost$Response(params: UpdatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<Post>> {
    return updatePost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatePost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePost(params: UpdatePost$Params, context?: HttpContext): Observable<Post> {
    return this.updatePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<Post>): Post => r.body)
    );
  }

  /** Path part for operation `addPost()` */
  static readonly AddPostPath = '/post/addPost';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addPost$Response(params: AddPost$Params, context?: HttpContext): Observable<StrictHttpResponse<Post>> {
    return addPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addPost(params: AddPost$Params, context?: HttpContext): Observable<Post> {
    return this.addPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<Post>): Post => r.body)
    );
  }

  /** Path part for operation `validatePost()` */
  static readonly ValidatePostPath = '/post/validate/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `validatePost()` instead.
   *
   * This method doesn't expect any request body.
   */
  validatePost$Response(params: ValidatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<Post>> {
    return validatePost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `validatePost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  validatePost(params: ValidatePost$Params, context?: HttpContext): Observable<Post> {
    return this.validatePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<Post>): Post => r.body)
    );
  }

  /** Path part for operation `retrievePost()` */
  static readonly RetrievePostPath = '/post/retrievePost/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `retrievePost()` instead.
   *
   * This method doesn't expect any request body.
   */
  retrievePost$Response(params: RetrievePost$Params, context?: HttpContext): Observable<StrictHttpResponse<Post>> {
    return retrievePost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `retrievePost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  retrievePost(params: RetrievePost$Params, context?: HttpContext): Observable<Post> {
    return this.retrievePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<Post>): Post => r.body)
    );
  }

  /** Path part for operation `retrieveAllPost()` */
  static readonly RetrieveAllPostPath = '/post/retrieveAllPost';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `retrieveAllPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  retrieveAllPost$Response(params?: RetrieveAllPost$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Post>>> {
    return retrieveAllPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `retrieveAllPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  retrieveAllPost(params?: RetrieveAllPost$Params, context?: HttpContext): Observable<Array<Post>> {
    return this.retrieveAllPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Post>>): Array<Post> => r.body)
    );
  }

  /** Path part for operation `deletePost()` */
  static readonly DeletePostPath = '/post/deletepost/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deletePost()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletePost$Response(params: DeletePost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deletePost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deletePost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletePost(params: DeletePost$Params, context?: HttpContext): Observable<void> {
    return this.deletePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
