/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addEvent } from '../fn/event-management/add-event';
import { AddEvent$Params } from '../fn/event-management/add-event';
import { display1 } from '../fn/event-management/display-1';
import { Display1$Params } from '../fn/event-management/display-1';
import { displayEvent } from '../fn/event-management/display-event';
import { DisplayEvent$Params } from '../fn/event-management/display-event';
import { displayEventHistory } from '../fn/event-management/display-event-history';
import { DisplayEventHistory$Params } from '../fn/event-management/display-event-history';
import { Event } from '../models/event';
import { EventWithReservationCount } from '../models/event-with-reservation-count';
import { getAvailableEventsWithReservationCount } from '../fn/event-management/get-available-events-with-reservation-count';
import { GetAvailableEventsWithReservationCount$Params } from '../fn/event-management/get-available-events-with-reservation-count';
import { updateEvent } from '../fn/event-management/update-event';
import { UpdateEvent$Params } from '../fn/event-management/update-event';

@Injectable({ providedIn: 'root' })
export class EventManagementService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateEvent()` */
  static readonly UpdateEventPath = '/Event/updateEvent';

  /**
   * UpdateEvent
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateEvent()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateEvent$Response(params: UpdateEvent$Params, context?: HttpContext): Observable<StrictHttpResponse<Event>> {
    return updateEvent(this.http, this.rootUrl, params, context);
  }

  /**
   * UpdateEvent
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateEvent$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateEvent(params: UpdateEvent$Params, context?: HttpContext): Observable<Event> {
    return this.updateEvent$Response(params, context).pipe(
      map((r: StrictHttpResponse<Event>): Event => r.body)
    );
  }

  /** Path part for operation `addEvent()` */
  static readonly AddEventPath = '/Event/addEvent';

  /**
   * AddEvent
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addEvent()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addEvent$Response(params: AddEvent$Params, context?: HttpContext): Observable<StrictHttpResponse<Event>> {
    return addEvent(this.http, this.rootUrl, params, context);
  }

  /**
   * AddEvent
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addEvent$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addEvent(params: AddEvent$Params, context?: HttpContext): Observable<Event> {
    return this.addEvent$Response(params, context).pipe(
      map((r: StrictHttpResponse<Event>): Event => r.body)
    );
  }

  /** Path part for operation `getAvailableEventsWithReservationCount()` */
  static readonly GetAvailableEventsWithReservationCountPath = '/Event/available';

  /**
   * Get available events with reservation counts
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAvailableEventsWithReservationCount()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAvailableEventsWithReservationCount$Response(params?: GetAvailableEventsWithReservationCount$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<EventWithReservationCount>>> {
    return getAvailableEventsWithReservationCount(this.http, this.rootUrl, params, context);
  }

  /**
   * Get available events with reservation counts
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAvailableEventsWithReservationCount$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAvailableEventsWithReservationCount(params?: GetAvailableEventsWithReservationCount$Params, context?: HttpContext): Observable<Array<EventWithReservationCount>> {
    return this.getAvailableEventsWithReservationCount$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<EventWithReservationCount>>): Array<EventWithReservationCount> => r.body)
    );
  }

  /** Path part for operation `displayEventHistory()` */
  static readonly DisplayEventHistoryPath = '/Event/DisplayEventHistory';

  /**
   * Display Event History (Canceled/Completed)
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `displayEventHistory()` instead.
   *
   * This method doesn't expect any request body.
   */
  displayEventHistory$Response(params?: DisplayEventHistory$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Event>>> {
    return displayEventHistory(this.http, this.rootUrl, params, context);
  }

  /**
   * Display Event History (Canceled/Completed)
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `displayEventHistory$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  displayEventHistory(params?: DisplayEventHistory$Params, context?: HttpContext): Observable<Array<Event>> {
    return this.displayEventHistory$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Event>>): Array<Event> => r.body)
    );
  }

  /** Path part for operation `displayEvent()` */
  static readonly DisplayEventPath = '/Event/DisplayEvent/{idE}';

  /**
   * Display Event By ID
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `displayEvent()` instead.
   *
   * This method doesn't expect any request body.
   */
  displayEvent$Response(params: DisplayEvent$Params, context?: HttpContext): Observable<StrictHttpResponse<Event>> {
    return displayEvent(this.http, this.rootUrl, params, context);
  }

  /**
   * Display Event By ID
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `displayEvent$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  displayEvent(params: DisplayEvent$Params, context?: HttpContext): Observable<Event> {
    return this.displayEvent$Response(params, context).pipe(
      map((r: StrictHttpResponse<Event>): Event => r.body)
    );
  }

  /** Path part for operation `display1()` */
  static readonly Display1Path = '/Event/DisplayAllEvents';

  /**
   * Display All Events
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `display1()` instead.
   *
   * This method doesn't expect any request body.
   */
  display1$Response(params?: Display1$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Event>>> {
    return display1(this.http, this.rootUrl, params, context);
  }

  /**
   * Display All Events
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `display1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  display1(params?: Display1$Params, context?: HttpContext): Observable<Array<Event>> {
    return this.display1$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Event>>): Array<Event> => r.body)
    );
  }

}
