/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { from, Observable, of } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getAllUsers } from '../fn/user-management/get-all-users';
import { GetAllUsers$Params } from '../fn/user-management/get-all-users';
import { User } from '../models/user';

@Injectable({ providedIn: 'root' })
export class UserManagementService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllUsers()` */
  static readonly GetAllUsersPath = '/users';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  /*getAllUsers$Response(params?: GetAllUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<User>>> {
    return getAllUsers(this.http, this.rootUrl, params, context);
  }

  

  getAllUsers(params?: GetAllUsers$Params, context?: HttpContext): Observable<Array<User>> {
    return this.getAllUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<User>>): Array<User> => r.body)
    );
  }*/

  /*  getAllUsers$Response(params?: GetAllUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<User>>> {
      return getAllUsers(this.http, this.rootUrl, params, context).pipe(
        map((r: StrictHttpResponse<any>) => {
          if (r.body instanceof Blob) {
            // Convert Blob to JSON text and then parse it
            return r.body.text().then(text => JSON.parse(text));
          }
          return r.body; // If it's not a Blob, just return the response body
        }),
        catchError((error) => {
          console.error('Error fetching users:', error);
          throw error;
        })
      );
    }*/
      
      getAllUsers$Response(params?: GetAllUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<User>>> {
        return getAllUsers(this.http, this.rootUrl, params, context).pipe(
          switchMap((r: StrictHttpResponse<any>) => {
            if (r.body instanceof Blob) {
              // Convert the Blob to a text and parse it into JSON
              return from(r.body.text()).pipe(
                map((text: string) => {
                  const parsedBody = JSON.parse(text); // Parse the JSON text
                  // Create a new HttpResponse with the parsed body and original response properties
                  const newResponse = new HttpResponse({
                    body: parsedBody,
                    status: r.status,
                    statusText: r.statusText,
                    headers: r.headers,
                    url: r.url ?? undefined,
                    
                  });
                  return newResponse;
                })
              );
            }
            return of(r); // Return the original response if the body is not a Blob
          }),
          catchError((error) => {
            console.error('Error fetching users:', error);
            throw error;
          })
        );
      }
      
      getAllUsers(params?: GetAllUsers$Params, context?: HttpContext): Observable<Array<User>> {
        return this.getAllUsers$Response(params, context).pipe(
          map((r: StrictHttpResponse<Array<User>>): Array<User> => r.body),
          catchError((error) => {
            console.error('Error in service method:', error);
            return of([]);  // Return an empty array on error to prevent app crashes
          })
        );
      }
      
}
