/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addRespons } from '../fn/respons-controller/add-respons';
import { AddRespons$Params } from '../fn/respons-controller/add-respons';
import { deleteRespons } from '../fn/respons-controller/delete-respons';
import { DeleteRespons$Params } from '../fn/respons-controller/delete-respons';
import { getAllRespons } from '../fn/respons-controller/get-all-respons';
import { GetAllRespons$Params } from '../fn/respons-controller/get-all-respons';
import { getRespons } from '../fn/respons-controller/get-respons';
import { GetRespons$Params } from '../fn/respons-controller/get-respons';
import { Respons } from '../models/respons';
import { updateRespons } from '../fn/respons-controller/update-respons';
import { UpdateRespons$Params } from '../fn/respons-controller/update-respons';

@Injectable({ providedIn: 'root' })
export class ResponsControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addRespons()` */
  static readonly AddResponsPath = '/respons/addrespons';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addRespons()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addRespons$Response(params: AddRespons$Params, context?: HttpContext): Observable<StrictHttpResponse<Respons>> {
    return addRespons(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addRespons$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addRespons(params: AddRespons$Params, context?: HttpContext): Observable<Respons> {
    return this.addRespons$Response(params, context).pipe(
      map((r: StrictHttpResponse<Respons>): Respons => r.body)
    );
  }

  /** Path part for operation `updateRespons()` */
  static readonly UpdateResponsPath = '/respons/updaterespons';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateRespons()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateRespons$Response(params: UpdateRespons$Params, context?: HttpContext): Observable<StrictHttpResponse<Respons>> {
    return updateRespons(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateRespons$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateRespons(params: UpdateRespons$Params, context?: HttpContext): Observable<Respons> {
    return this.updateRespons$Response(params, context).pipe(
      map((r: StrictHttpResponse<Respons>): Respons => r.body)
    );
  }

  /** Path part for operation `getRespons()` */
  static readonly GetResponsPath = '/respons/displayrespons/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRespons()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRespons$Response(params: GetRespons$Params, context?: HttpContext): Observable<StrictHttpResponse<Respons>> {
    return getRespons(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRespons$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRespons(params: GetRespons$Params, context?: HttpContext): Observable<Respons> {
    return this.getRespons$Response(params, context).pipe(
      map((r: StrictHttpResponse<Respons>): Respons => r.body)
    );
  }

  /** Path part for operation `getAllRespons()` */
  static readonly GetAllResponsPath = '/respons/dispalyallrespons';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllRespons()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRespons$Response(params?: GetAllRespons$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Respons>>> {
    return getAllRespons(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllRespons$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRespons(params?: GetAllRespons$Params, context?: HttpContext): Observable<Array<Respons>> {
    return this.getAllRespons$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Respons>>): Array<Respons> => r.body)
    );
  }

  /** Path part for operation `deleteRespons()` */
  static readonly DeleteResponsPath = '/respons/deleterespons/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteRespons()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRespons$Response(params: DeleteRespons$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteRespons(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteRespons$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRespons(params: DeleteRespons$Params, context?: HttpContext): Observable<void> {
    return this.deleteRespons$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
