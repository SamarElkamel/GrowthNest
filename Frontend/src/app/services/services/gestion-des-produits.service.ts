/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addProducts } from '../fn/gestion-des-produits/add-products';
import { AddProducts$Params } from '../fn/gestion-des-produits/add-products';
import { deleteProductById } from '../fn/gestion-des-produits/delete-product-by-id';
import { DeleteProductById$Params } from '../fn/gestion-des-produits/delete-product-by-id';
import { getAllProducts } from '../fn/gestion-des-produits/get-all-products';
import { GetAllProducts$Params } from '../fn/gestion-des-produits/get-all-products';
import { getProductById } from '../fn/gestion-des-produits/get-product-by-id';
import { GetProductById$Params } from '../fn/gestion-des-produits/get-product-by-id';
import { Products } from '../models/products';
import { updateProducts } from '../fn/gestion-des-produits/update-products';
import { UpdateProducts$Params } from '../fn/gestion-des-produits/update-products';
import { addBusinessProduct, AddBusinessProduct$Params } from '../fn/gestion-des-produits/add-business-product';
import { getProductsByBusiness, GetProductsByBusiness$Params } from '../fn/gestion-des-produits/get-products-by-business';
import { RequestBuilder } from '../request-builder';

@Injectable({ providedIn: 'root' })
export class GestionDesProduitsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateProducts()` */
  static readonly UpdateProductsPath = '/Products/updateProduct';

  /**
   * modifier un produit
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateProducts()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateProducts$Response(params: UpdateProducts$Params, context?: HttpContext): Observable<StrictHttpResponse<Products>> {
    return updateProducts(this.http, this.rootUrl, params, context);
  }

  /**
   * modifier un produit
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateProducts$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateProducts(params: UpdateProducts$Params, context?: HttpContext): Observable<Products> {
    return this.updateProducts$Response(params, context).pipe(
      map((r: StrictHttpResponse<Products>): Products => r.body)
    );
  }

  /** Path part for operation `addProducts()` */
  static readonly AddProductsPath = '/Products/addProduct';

  /**
   * ajouter un produit
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addProducts()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addProducts$Response(params: AddProducts$Params, context?: HttpContext): Observable<StrictHttpResponse<Products>> {
    return addProducts(this.http, this.rootUrl, params, context);
  }

  /**
   * ajouter un produit
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addProducts$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addProducts(params: AddProducts$Params, context?: HttpContext): Observable<Products> {
    return this.addProducts$Response(params, context).pipe(
      map((r: StrictHttpResponse<Products>): Products => r.body)
    );
  }

  /** Path part for operation `getProductById()` */
  static readonly GetProductByIdPath = '/Products/getProductById/{idP}';

  /**
   * afficher un produit selon l'id
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProductById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProductById$Response(params: GetProductById$Params, context?: HttpContext): Observable<StrictHttpResponse<Products>> {
    return getProductById(this.http, this.rootUrl, params, context);
  }

  /**
   * afficher un produit selon l'id
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProductById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProductById(params: GetProductById$Params, context?: HttpContext): Observable<Products> {
    return this.getProductById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Products>): Products => r.body)
    );
  }

  /** Path part for operation `getAllProducts()` */
  static readonly GetAllProductsPath = '/Products/getAllProducts';

  /**
   * afficher tous les produits
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllProducts()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllProducts$Response(params?: GetAllProducts$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Products>>> {
    return getAllProducts(this.http, this.rootUrl, params, context);
  }

  /**
   * afficher tous les produits
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllProducts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllProducts(params?: GetAllProducts$Params, context?: HttpContext): Observable<Array<Products>> {
    return this.getAllProducts$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Products>>): Array<Products> => r.body)
    );
  }

  /** Path part for operation `deleteProductById()` */
  static readonly DeleteProductByIdPath = '/Products/deleteProduct/{idP}';

  /**
   * supprimer un produit
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteProductById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProductById$Response(params: DeleteProductById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteProductById(this.http, this.rootUrl, params, context);
  }

  /**
   * supprimer un produit
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteProductById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProductById(params: DeleteProductById$Params, context?: HttpContext): Observable<void> {
    return this.deleteProductById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }
  // Nouveaux paths
static readonly AddBusinessProductPath = '/Products/business/{businessId}';
static readonly GetProductsByBusinessPath =  '/Products/business/{businessId}';

/**
 * ðŸ”¹ Ajouter un produit Ã  un business
 */
addBusinessProduct$Response(params: AddBusinessProduct$Params, context?: HttpContext): Observable<StrictHttpResponse<Products>> {
  return addBusinessProduct(this.http, this.rootUrl, params, context);
}

addBusinessProduct(params: AddBusinessProduct$Params, context?: HttpContext): Observable<Products> {
  return this.addBusinessProduct$Response(params, context).pipe(
    map((r: StrictHttpResponse<Products>): Products => r.body)
  );
}

/**
 * ðŸ”¹ Obtenir les produits d'un business
 */
getProductsByBusiness$Response(params: GetProductsByBusiness$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Products>>> {
  const rb = new RequestBuilder(this.rootUrl, GestionDesProduitsService.GetProductsByBusinessPath, 'get');
  if (params) {
    rb.path('businessId', params.businessId, {});
  }

  return this.http.request(
    rb.build({
      responseType: 'json',
      accept: 'application/json',
      context // Ajouter le contexte si nÃ©cessaire
    })
  ).pipe(
    filter((r: any) => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => r as StrictHttpResponse<Array<Products>>)
  );
}

getProductsByBusiness(params: GetProductsByBusiness$Params, context?: HttpContext): Observable<Array<Products>> {
  return this.getProductsByBusiness$Response(params, context).pipe(
    map((r: StrictHttpResponse<Array<Products>>): Array<Products> => r.body)
  );
}

}
