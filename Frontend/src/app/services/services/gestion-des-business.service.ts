/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable, Subject } from 'rxjs';
import { filter, map, switchMap, take, tap } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addBusiness } from '../fn/gestion-des-business/add-business';
import { AddBusiness$Params } from '../fn/gestion-des-business/add-business';
import { Business } from '../models/business';
import { deleteBusiness } from '../fn/gestion-des-business/delete-business';
import { DeleteBusiness$Params } from '../fn/gestion-des-business/delete-business';
import { getAllBusiness } from '../fn/gestion-des-business/get-all-business';
import { GetAllBusiness$Params } from '../fn/gestion-des-business/get-all-business';
import { getBusinessById } from '../fn/gestion-des-business/get-business-by-id';
import { GetBusinessById$Params } from '../fn/gestion-des-business/get-business-by-id';
import { updateBusiness } from '../fn/gestion-des-business/update-business';
import { UpdateBusiness$Params } from '../fn/gestion-des-business/update-business';
import { Router } from '@angular/router';
import { RequestBuilder } from '../request-builder';

@Injectable({ providedIn: 'root' })
export class GestionDesBusinessService extends BaseService {
  private refreshList$ = new Subject<void>();
  
  constructor(config: ApiConfiguration, http: HttpClient,private router: Router) {
    super(config, http);
  }

  /** Path part for operation `updateBusiness()` */

  static readonly UpdateBusinessPath = '/business/updateBusiness';

  /**
   * modifier un business
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateBusiness()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateBusiness$Response(params: UpdateBusiness$Params, context?: HttpContext): Observable<StrictHttpResponse<Business>> {
    return updateBusiness(this.http, this.rootUrl, params, context);
  }

  /**
   * modifier un business
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateBusiness$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateBusiness(params: UpdateBusiness$Params, context?: HttpContext): Observable<Business> {
    return this.updateBusiness$Response(params, context).pipe(
      map((r: StrictHttpResponse<Business>): Business => r.body)
    );
  }
private currentBusiness = new BehaviorSubject<Business | null>(null);
  /** Path part for operation `addBusiness()` */
  static readonly AddBusinessPath = '/business/addBusiness';

  /**
   * ajouter un business
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addBusiness()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addBusiness$Response(params: AddBusiness$Params, context?: HttpContext): Observable<StrictHttpResponse<Business>> {
    return addBusiness(this.http, this.rootUrl, params, context);
  }
  
  
  // Ajoutez ces méthodes
  getCurrentBusiness(): Observable<Business | null> {
    return this.currentBusiness.asObservable();
  }
  
  navigateToBusinessDetails(idBusiness: number): void {
    this.router.navigate([`/admin/my-business/${idBusiness}`]);
  }

  /**
   * ajouter un business
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addBusiness$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  /*addBusiness(params: AddBusiness$Params, context?: HttpContext): Observable<Business> {
    return this.addBusiness$Response(params, context).pipe(
      map((r: StrictHttpResponse<Business>): Business => r.body)
    );
  }*/
  addBusiness(params: AddBusiness$Params): Observable<Business> {
    return this.addBusiness$Response(params).pipe(
      map((r: StrictHttpResponse<Business>) => r.body),
      tap({
        next: (newBusiness) => {
          this.currentBusiness.next(newBusiness);
          
        },
        error: (err) => console.error('Erreur création business:', err)
      })
    );
  }

  /** Path part for operation `getBusinessById()` */
  static readonly GetBusinessByIdPath = '/business/getBusinessById/{idB}';

  /**
   * afficher un business selon l'id
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBusinessById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBusinessById$Response(params: GetBusinessById$Params, context?: HttpContext): Observable<StrictHttpResponse<Business>> {
    return getBusinessById(this.http, this.rootUrl, params, context);
  }

  /**
   * afficher un business selon l'id
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBusinessById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBusinessById(params: GetBusinessById$Params, context?: HttpContext): Observable<Business> {
    return this.getBusinessById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Business>): Business => r.body)
    );
  }

  /** Path part for operation `getAllBusiness()` */
  static readonly GetAllBusinessPath = '/business/getAllBusiness';

  /**
   * afficher tous les business
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllBusiness()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllBusiness$Response(params?: GetAllBusiness$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Business>>> {
    return getAllBusiness(this.http, this.rootUrl, params, context);
  }

  /**
   * afficher tous les business
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllBusiness$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllBusiness(params?: GetAllBusiness$Params, context?: HttpContext): Observable<Array<Business>> {
    return this.getAllBusiness$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Business>>): Array<Business> => r.body)
    );
  }

  /** Path part for operation `deleteBusiness()` */
  static readonly DeleteBusinessPath = '/business/deleteBusiness/{idB}';

  /**
   * supprimer un business
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteBusiness()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteBusiness$Response(params: DeleteBusiness$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteBusiness(this.http, this.rootUrl, params, context);
  }

  /**
   * supprimer un business
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteBusiness$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteBusiness(params: DeleteBusiness$Params, context?: HttpContext): Observable<void> {
    return this.deleteBusiness$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }
   /**
   * Déclenche une actualisation de la liste
   */
   triggerRefresh(): void {
    this.refreshList$.next();
  }

  /**
   * Observable pour écouter les demandes d'actualisation
   */
  getRefreshObservable(): Observable<void> {
    return this.refreshList$.asObservable();
  }

/**
   * Rate a business
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rateBusiness()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
rateBusiness$Response(params: { businessId: number; ratingValue: number }, context?: HttpContext): Observable<StrictHttpResponse<void>> {
  const rb = new RequestBuilder(this.rootUrl, GestionDesBusinessService.RateBusinessPath, 'post');
  if (params) {
    rb.path('businessId', params.businessId, {});
    rb.body(params.ratingValue, 'application/json');
  }

  return this.http.request(
    rb.build({
      responseType: 'json',
      accept: 'application/json',
      context
    })
  ).pipe(
    filter((r: any) => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => r as StrictHttpResponse<void>)
  );
}

/**
 * Rate a business
 *
 * This method provides access only to the response body.
 * To access the full response (for headers, for example), `rateBusiness$Response()` instead.
 *
 * This method sends `application/json` and handles request body of type `application/json`.
 */
rateBusiness(params: { businessId: number; ratingValue: number }, context?: HttpContext): Observable<void> {
  return this.rateBusiness$Response(params, context).pipe(
    map((r: StrictHttpResponse<void>): void => r.body)
  );
}
static readonly RateBusinessPath = '/business/{businessId}/rate';
static readonly GetUserRatingPath = '/business/{businessId}/user-rating';

  getUserRating$Response(params: { businessId: number }, context?: HttpContext): Observable<StrictHttpResponse<number | null>> {
    const rb = new RequestBuilder(this.rootUrl, GestionDesBusinessService.GetUserRatingPath, 'get');
    if (params) {
      rb.path('businessId', params.businessId, {});
    }
    return this.http.request(
      rb.build({
        responseType: 'json',
        accept: 'application/json',
        context
      })
    ).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => r as StrictHttpResponse<number | null>)
    );
  }

  getUserRating(params: { businessId: number }, context?: HttpContext): Observable<number | null> {
    return this.getUserRating$Response(params, context).pipe(
      map((r: StrictHttpResponse<number | null>) => r.body)
    );
  }

}
