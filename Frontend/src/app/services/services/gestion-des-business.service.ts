/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable, Subject } from 'rxjs';
import { filter, map, tap } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addBusiness } from '../fn/gestion-des-business/add-business';
import { AddBusiness$Params } from '../fn/gestion-des-business/add-business';
import { Business } from '../models/business';
import { deleteBusiness } from '../fn/gestion-des-business/delete-business';
import { DeleteBusiness$Params } from '../fn/gestion-des-business/delete-business';
import { getAllBusiness } from '../fn/gestion-des-business/get-all-business';
import { GetAllBusiness$Params } from '../fn/gestion-des-business/get-all-business';
import { getBusinessById } from '../fn/gestion-des-business/get-business-by-id';
import { GetBusinessById$Params } from '../fn/gestion-des-business/get-business-by-id';
import { updateBusiness } from '../fn/gestion-des-business/update-business';
import { UpdateBusiness$Params } from '../fn/gestion-des-business/update-business';
import { Router } from '@angular/router';
import { RequestBuilder } from '../request-builder';

@Injectable({ providedIn: 'root' })
export class GestionDesBusinessService extends BaseService {
  private refreshList$ = new Subject<void>();
  private currentBusiness = new BehaviorSubject<Business | null>(null);

  constructor(config: ApiConfiguration, http: HttpClient, private router: Router) {
    super(config, http);
  }

  /** Path part for operation `uploadLogo()` */
  static readonly UploadLogoPath = '/business/upload-logo';

  /**
   * Uploader un logo
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadLogo()` instead.
   *
   * This method sends `image/*` and handles request body of type `File`.
   */
  uploadLogo$Response(params: { body: File }, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    const rb = new RequestBuilder(this.rootUrl, GestionDesBusinessService.UploadLogoPath, 'post');
    if (params) {
      rb.body(params.body, params.body.type || 'image/jpeg');
    }

    return this.http.request(
      rb.build({
        responseType: 'text',
        accept: 'text/plain',
        context,
      })
    ).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => r as StrictHttpResponse<string>)
    );
  }

  /**
   * Uploader un logo
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadLogo$Response()` instead.
   *
   * This method sends `image/*` and handles request body of type `File`.
   */
  uploadLogo(params: { body: File }, context?: HttpContext): Observable<string> {
    return this.uploadLogo$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `addBusiness()` */
  static readonly AddBusinessPath = '/business/addBusiness';

  /**
   * Ajouter un business
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addBusiness()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addBusiness$Response(params: AddBusiness$Params, context?: HttpContext): Observable<StrictHttpResponse<Business>> {
    return addBusiness(this.http, this.rootUrl, params, context);
  }

  /**
   * Ajouter un business
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addBusiness$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addBusiness(params: AddBusiness$Params, context?: HttpContext): Observable<Business> {
    return this.addBusiness$Response(params, context).pipe(
      map((r: StrictHttpResponse<Business>) => r.body),
      tap({
        next: (newBusiness) => {
          this.currentBusiness.next(newBusiness);
        },
        error: (err) => console.error('Erreur cr√©ation business:', err),
      })
    );
  }

  /** Path part for operation `updateBusiness()` */
  static readonly UpdateBusinessPath = '/business/updateBusiness';

  /**
   * Modifier un business
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateBusiness()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateBusiness$Response(params: UpdateBusiness$Params, context?: HttpContext): Observable<StrictHttpResponse<Business>> {
    return updateBusiness(this.http, this.rootUrl, params, context);
  }

  /**
   * Modifier un business
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateBusiness$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateBusiness(params: UpdateBusiness$Params, context?: HttpContext): Observable<Business> {
    return this.updateBusiness$Response(params, context).pipe(
      map((r: StrictHttpResponse<Business>): Business => r.body)
    );
  }

  /** Path part for operation `getBusinessById()` */
  static readonly GetBusinessByIdPath = '/business/getBusinessById/{idB}';

  /**
   * Afficher un business selon l'id
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBusinessById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBusinessById$Response(params: GetBusinessById$Params, context?: HttpContext): Observable<StrictHttpResponse<Business>> {
    return getBusinessById(this.http, this.rootUrl, params, context);
  }

  /**
   * Afficher un business selon l'id
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBusinessById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBusinessById(params: GetBusinessById$Params, context?: HttpContext): Observable<Business> {
    return this.getBusinessById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Business>): Business => r.body)
    );
  }

  /** Path part for operation `getAllBusiness()` */
  static readonly GetAllBusinessPath = '/business/getAllBusiness';

  /**
   * Afficher tous les business
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllBusiness()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllBusiness$Response(params?: GetAllBusiness$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Business>>> {
    return getAllBusiness(this.http, this.rootUrl, params, context);
  }

  /**
   * Afficher tous les business
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllBusiness$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllBusiness(params?: GetAllBusiness$Params, context?: HttpContext): Observable<Array<Business>> {
    return this.getAllBusiness$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Business>>): Array<Business> => r.body)
    );
  }

  /** Path part for operation `deleteBusiness()` */
  static readonly DeleteBusinessPath = '/business/deleteBusiness/{idB}';

  /**
   * Supprimer un business
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteBusiness()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteBusiness$Response(params: DeleteBusiness$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteBusiness(this.http, this.rootUrl, params, context);
  }

  /**
   * Supprimer un business
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteBusiness$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteBusiness(params: DeleteBusiness$Params, context?: HttpContext): Observable<void> {
    return this.deleteBusiness$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `rateBusiness()` */
  static readonly RateBusinessPath = '/business/{businessId}/rate';

  /**
   * Rate a business
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rateBusiness()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  rateBusiness$Response(params: { businessId: number; ratingValue: number }, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    if (params.ratingValue < 1 || params.ratingValue > 5) {
      console.error(`Invalid rating value: ${params.ratingValue}. Must be between 1 and 5.`);
      throw new Error('Rating value must be between 1 and 5');
    }
    console.log(`Submitting rating: businessId=${params.businessId}, ratingValue=${params.ratingValue}`);
    const rb = new RequestBuilder(this.rootUrl, GestionDesBusinessService.RateBusinessPath, 'post');
    if (params) {
      rb.path('businessId', params.businessId, {});
      rb.body(params.ratingValue, 'application/json');
    }

    return this.http.request(
      rb.build({
        responseType: 'json',
        accept: 'application/json',
        context,
      })
    ).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => r as StrictHttpResponse<void>),
      tap({
        next: () => console.log(`Rating submitted successfully: businessId=${params.businessId}`),
        error: (err) => console.error(`Error submitting rating for businessId=${params.businessId}: ${err.message}`)
      })
    );
  }

  /**
   * Rate a business
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rateBusiness$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  rateBusiness(params: { businessId: number; ratingValue: number }, context?: HttpContext): Observable<void> {
    return this.rateBusiness$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getUserRating()` */
  static readonly GetUserRatingPath = '/business/{businessId}/user-rating';

  /**
   * Get user rating for a business
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserRating()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserRating$Response(params: { businessId: number }, context?: HttpContext): Observable<StrictHttpResponse<number | null>> {
    console.log(`Fetching user rating for businessId=${params.businessId}`);
    const rb = new RequestBuilder(this.rootUrl, GestionDesBusinessService.GetUserRatingPath, 'get');
    if (params) {
      rb.path('businessId', params.businessId, {});
    }
    return this.http.request(
      rb.build({
        responseType: 'json',
        accept: 'application/json',
        context,
      })
    ).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => r as StrictHttpResponse<number | null>),
      tap({
        next: (r) => console.log(`User rating fetched: businessId=${params.businessId}, value=${r.body}`),
        error: (err) => console.error(`Error fetching user rating for businessId=${params.businessId}: ${err.message}`)
      })
    );
  }

  /**
   * Get user rating for a business
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserRating$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserRating(params: { businessId: number }, context?: HttpContext): Observable<number | null> {
    return this.getUserRating$Response(params, context).pipe(
      map((r: StrictHttpResponse<number | null>) => r.body)
    );
  }

  /**
   * Get the current business
   */
  getCurrentBusiness(): Observable<Business | null> {
    return this.currentBusiness.asObservable();
  }

  /**
   * Navigate to business details
   */
  navigateToBusinessDetails(idBusiness: number): void {
    this.router.navigate([`/admin/my-business/${idBusiness}`]);
  }

  /**
   * Trigger a list refresh
   */
  triggerRefresh(): void {
    this.refreshList$.next();
  }

  /**
   * Observable for refresh requests
   */
  getRefreshObservable(): Observable<void> {
    return this.refreshList$.asObservable();
  }

  /** Path part for operation `getQRCodeForBusiness()` */
  static readonly GetQRCodeForBusinessPath = '/business/{id}/qrcode';

  /**
   * R√©cup√©rer le QR Code pour un business
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getQRCodeForBusiness()` instead.
   *
   * This method doesn't expect any request body.
   */
  getQRCodeForBusiness$Response(params: { id: number; width?: number; height?: number }, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    console.log(`Fetching QR code for businessId=${params.id}`);
    const rb = new RequestBuilder(this.rootUrl, GestionDesBusinessService.GetQRCodeForBusinessPath, 'get');
    if (params) {
      rb.path('id', params.id, {});
      rb.query('width', params.width || 200, {});
      rb.query('height', params.height || 200, {});
    }

    return this.http.request(
      rb.build({
        responseType: 'blob',
        accept: 'image/png',
        context,
      })
    ).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => r as StrictHttpResponse<Blob>),
      tap({
        next: () => console.log(`QR code fetched for businessId=${params.id}`),
        error: (err) => console.error(`Error fetching QR code for businessId=${params.id}: ${err.message}`)
      })
    );
  }

  /**
   * R√©cup√©rer le QR Code pour un business
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getQRCodeForBusiness$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getQRCodeForBusiness(params: { id: number; width?: number; height?: number }, context?: HttpContext): Observable<Blob> {
    return this.getQRCodeForBusiness$Response(params, context).pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }
}