/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addRegistration } from '../fn/registration-management/add-registration';
import { AddRegistration$Params } from '../fn/registration-management/add-registration';
import { deleteRegistration } from '../fn/registration-management/delete-registration';
import { DeleteRegistration$Params } from '../fn/registration-management/delete-registration';
import { display } from '../fn/registration-management/display';
import { Display$Params } from '../fn/registration-management/display';
import { displayByEvent } from '../fn/registration-management/display-by-event';
import { DisplayByEvent$Params } from '../fn/registration-management/display-by-event';
import { displayRegistration } from '../fn/registration-management/display-registration';
import { DisplayRegistration$Params } from '../fn/registration-management/display-registration';
import { getUserReservations } from '../fn/registration-management/get-user-reservations';
import { GetUserReservations$Params } from '../fn/registration-management/get-user-reservations';
import { Registration } from '../models/registration';
import { updateRegistration } from '../fn/registration-management/update-registration';
import { UpdateRegistration$Params } from '../fn/registration-management/update-registration';

@Injectable({ providedIn: 'root' })
export class RegistrationManagementService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateRegistration()` */
  static readonly UpdateRegistrationPath = '/Registration/updateRegistration';

  /**
   * UpdateRegistration
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateRegistration()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateRegistration$Response(params: UpdateRegistration$Params, context?: HttpContext): Observable<StrictHttpResponse<Registration>> {
    return updateRegistration(this.http, this.rootUrl, params, context);
  }

  /**
   * UpdateRegistration
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateRegistration$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateRegistration(params: UpdateRegistration$Params, context?: HttpContext): Observable<Registration> {
    return this.updateRegistration$Response(params, context).pipe(
      map((r: StrictHttpResponse<Registration>): Registration => r.body)
    );
  }

  /** Path part for operation `addRegistration()` */
  static readonly AddRegistrationPath = '/Registration/addRegistration';

  /**
   * AddRegistration
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addRegistration()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addRegistration$Response(params: AddRegistration$Params, context?: HttpContext): Observable<StrictHttpResponse<Registration>> {
    return addRegistration(this.http, this.rootUrl, params, context);
  }

  /**
   * AddRegistration
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addRegistration$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addRegistration(params: AddRegistration$Params, context?: HttpContext): Observable<Registration> {
    return this.addRegistration$Response(params, context).pipe(
      map((r: StrictHttpResponse<Registration>): Registration => r.body)
    );
  }

  /** Path part for operation `getUserReservations()` */
  static readonly GetUserReservationsPath = '/Registration/user/{userId}';

  /**
   * Get user's reservation history
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserReservations()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserReservations$Response(params: GetUserReservations$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Registration>>> {
    return getUserReservations(this.http, this.rootUrl, params, context);
  }

  /**
   * Get user's reservation history
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserReservations$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserReservations(params: GetUserReservations$Params, context?: HttpContext): Observable<Array<Registration>> {
    return this.getUserReservations$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Registration>>): Array<Registration> => r.body)
    );
  }

  /** Path part for operation `displayRegistration()` */
  static readonly DisplayRegistrationPath = '/Registration/DisplayRegistration/{idR}';

  /**
   * Display Registration By ID
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `displayRegistration()` instead.
   *
   * This method doesn't expect any request body.
   */
  displayRegistration$Response(params: DisplayRegistration$Params, context?: HttpContext): Observable<StrictHttpResponse<Registration>> {
    return displayRegistration(this.http, this.rootUrl, params, context);
  }

  /**
   * Display Registration By ID
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `displayRegistration$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  displayRegistration(params: DisplayRegistration$Params, context?: HttpContext): Observable<Registration> {
    return this.displayRegistration$Response(params, context).pipe(
      map((r: StrictHttpResponse<Registration>): Registration => r.body)
    );
  }

  /** Path part for operation `displayByEvent()` */
  static readonly DisplayByEventPath = '/Registration/DisplayByEvent/{eventId}';

  /**
   * Display Registrations By Event ID
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `displayByEvent()` instead.
   *
   * This method doesn't expect any request body.
   */
  displayByEvent$Response(params: DisplayByEvent$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Registration>>> {
    return displayByEvent(this.http, this.rootUrl, params, context);
  }

  /**
   * Display Registrations By Event ID
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `displayByEvent$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  displayByEvent(params: DisplayByEvent$Params, context?: HttpContext): Observable<Array<Registration>> {
    return this.displayByEvent$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Registration>>): Array<Registration> => r.body)
    );
  }

  /** Path part for operation `display()` */
  static readonly DisplayPath = '/Registration/DisplayAllRegistration';

  /**
   * Display All Registration
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `display()` instead.
   *
   * This method doesn't expect any request body.
   */
  display$Response(params?: Display$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Registration>>> {
    return display(this.http, this.rootUrl, params, context);
  }

  /**
   * Display All Registration
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `display$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  display(params?: Display$Params, context?: HttpContext): Observable<Array<Registration>> {
    return this.display$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Registration>>): Array<Registration> => r.body)
    );
  }

  /** Path part for operation `deleteRegistration()` */
  static readonly DeleteRegistrationPath = '/Registration/deleteRegistration/{idR}';

  /**
   * DeleteRegistration
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteRegistration()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRegistration$Response(params: DeleteRegistration$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteRegistration(this.http, this.rootUrl, params, context);
  }

  /**
   * DeleteRegistration
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteRegistration$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRegistration(params: DeleteRegistration$Params, context?: HttpContext): Observable<void> {
    return this.deleteRegistration$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
