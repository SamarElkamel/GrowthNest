/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addReact } from '../fn/react-controller/add-react';
import { AddReact$Params } from '../fn/react-controller/add-react';
import { deleteReact } from '../fn/react-controller/delete-react';
import { DeleteReact$Params } from '../fn/react-controller/delete-react';
import { getAllReacts } from '../fn/react-controller/get-all-reacts';
import { GetAllReacts$Params } from '../fn/react-controller/get-all-reacts';
import { getReactById } from '../fn/react-controller/get-react-by-id';
import { GetReactById$Params } from '../fn/react-controller/get-react-by-id';
import { getReactsByPost } from '../fn/react-controller/get-reacts-by-post';
import { GetReactsByPost$Params } from '../fn/react-controller/get-reacts-by-post';
import { getReactsByUser } from '../fn/react-controller/get-reacts-by-user';
import { GetReactsByUser$Params } from '../fn/react-controller/get-reacts-by-user';
import { React } from '../models/react';

@Injectable({ providedIn: 'root' })
export class ReactControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addReact()` */
  static readonly AddReactPath = '/api/reacts/add';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addReact()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addReact$Response(params: AddReact$Params, context?: HttpContext): Observable<StrictHttpResponse<React>> {
    return addReact(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addReact$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addReact(params: AddReact$Params, context?: HttpContext): Observable<React> {
    return this.addReact$Response(params, context).pipe(
      map((r: StrictHttpResponse<React>): React => r.body)
    );
  }

  /** Path part for operation `getReactById()` */
  static readonly GetReactByIdPath = '/api/reacts/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getReactById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReactById$Response(params: GetReactById$Params, context?: HttpContext): Observable<StrictHttpResponse<React>> {
    return getReactById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getReactById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReactById(params: GetReactById$Params, context?: HttpContext): Observable<React> {
    return this.getReactById$Response(params, context).pipe(
      map((r: StrictHttpResponse<React>): React => r.body)
    );
  }

  /** Path part for operation `getReactsByUser()` */
  static readonly GetReactsByUserPath = '/api/reacts/user/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getReactsByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReactsByUser$Response(params: GetReactsByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<React>>> {
    return getReactsByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getReactsByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReactsByUser(params: GetReactsByUser$Params, context?: HttpContext): Observable<Array<React>> {
    return this.getReactsByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<React>>): Array<React> => r.body)
    );
  }

  /** Path part for operation `getReactsByPost()` */
  static readonly GetReactsByPostPath = '/api/reacts/post/{postId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getReactsByPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReactsByPost$Response(params: GetReactsByPost$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<React>>> {
    return getReactsByPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getReactsByPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReactsByPost(params: GetReactsByPost$Params, context?: HttpContext): Observable<Array<React>> {
    return this.getReactsByPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<React>>): Array<React> => r.body)
    );
  }

  /** Path part for operation `getAllReacts()` */
  static readonly GetAllReactsPath = '/api/reacts/all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllReacts()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllReacts$Response(params?: GetAllReacts$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<React>>> {
    return getAllReacts(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllReacts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllReacts(params?: GetAllReacts$Params, context?: HttpContext): Observable<Array<React>> {
    return this.getAllReacts$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<React>>): Array<React> => r.body)
    );
  }

  /** Path part for operation `deleteReact()` */
  static readonly DeleteReactPath = '/api/reacts/delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteReact()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteReact$Response(params: DeleteReact$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteReact(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteReact$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteReact(params: DeleteReact$Params, context?: HttpContext): Observable<void> {
    return this.deleteReact$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
